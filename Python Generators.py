'''পাইথন জেনারেটর কি?
পাইথন জেনারেটর হল সেই ফাংশন যা ট্রাভার্সাল অবজেক্টকে ফিরিয়ে দেয় এবং ইটারেটর তৈরি করতে ব্যবহৃত হয়। এটি একবারে সমগ্র আইটেম অতিক্রম করে। জেনারেটর একটি অভিব্যক্তিও হতে পারে যেখানে সিনট্যাক্স পাইথনের তালিকা বোঝার মতো।

পাইথনে পুনরাবৃত্তি তৈরিতে অনেক জটিলতা রয়েছে; অভ্যন্তরীণ অবস্থার ট্র্যাক রাখতে আমাদের __iter __() এবং __next__() পদ্ধতি প্রয়োগ করতে হবে।

এটি পুনরাবৃত্তিকারী তৈরি করা একটি দীর্ঘ প্রক্রিয়া। এই কারণেই জেনারেটর এই প্রক্রিয়াটিকে সহজ করার জন্য একটি অপরিহার্য ভূমিকা পালন করে। যদি পুনরাবৃত্তিতে কোন মান পাওয়া না যায়, তাহলে এটি StopIteration ব্যতিক্রম উত্থাপন করে।'''

'''পাইথনে একটি জেনারেটর তৈরি করা বেশ সহজ। এটি def কীওয়ার্ড দ্বারা সংজ্ঞায়িত সাধারণ ফাংশনের অনুরূপ এবং রিটার্নের পরিবর্তে একটি yield কীওয়ার্ড ব্যবহার করে। অথবা আমরা বলতে পারি যে কোন ফাংশনের বডিতে যদি একটি ফলন বিবৃতি থাকে তবে এটি স্বয়ংক্রিয়ভাবে একটি জেনারেটর ফাংশনে পরিণত হয়। নিম্নলিখিত উদাহরণ বিবেচনা করুন'''


def simple():
    for i in range(10):
        if (i % 2 == 0):
            yield i


print(list(simple()))

# *yield vs. return

'''yield বিবৃতি জেনারেটর ফাংশনের প্রবাহ নিয়ন্ত্রণের জন্য দায়ী । এটি সমস্ত states সংরক্ষণ করে ফাংশন সম্পাদনকে বিরতি দেয় এবং caller প্রদান করে। পরবর্তীতে একটি ধারাবাহিক ফাংশন কল করা হলে এটি এক্সিকিউশন পুনরায় শুরু করে। আমরা জেনারেটর ফাংশনে একাধিক yield বিবৃতি ব্যবহার করতে পারি।

return স্টেটমেন্ট একটি মান প্রদান করে এবং পুরো ফাংশনটি বন্ধ করে দেয় এবং ফাংশনে শুধুমাত্র একটি রিটার্ন স্টেটমেন্ট ব্যবহার করা যেতে পারে।'''


def multiple_yield():
    str1 = "First String"
    yield str1

    str2 = "Second string"
    yield str2

    str3 = "Third String"
    yield str3


obj = multiple_yield()
print(next(obj))
print(next(obj))
print(next(obj))

list = [1, 2, 3, 4, 5, 6, 7]

# List Comprehension
a = [x**3 for x in list]

# Generator expression
z = (x**3 for x in list)

print(a)
print(z)
print(next(z))
print(next(z))
print(next(z))
print(next(z))

